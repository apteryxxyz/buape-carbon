---
path: README.md
---

{{!-- INTRODUCTION --}}
# {{name}}

This is a bot made using [Carbon](https://carbon.buape.com) and generated with the [`create-carbon`](https://github.com/buape/carbon/tree/main/packages/create-carbon) CLI tool.

If you need any assistance, you can join our [Discord](https://go.buape.com/carbon) and ask in the `#support` channel.

{{!-- SETTING ENVIRONMENT VARIABLES --}}
## Setting Environment Variables

Before you can start your bot, you will need to set your environment variables in your `.env` file.
{{#if (eq runtime "cloudflare")}}
You can run each of these commands to set your tokens:

```bash
wrangler secret put DISCORD_CLIENT_ID
{{#if plugins.linkedRoles}}
wrangler secret put DISCORD_CLIENT_SECRET
{{/if}}
wrangler secret put DISCORD_PUBLIC_KEY
wrangler secret put DISCORD_BOT_TOKEN
{{#if plugins.linkedRoles}}
wrangler secret put BASE_URL
{{/if}}
```
{{/if}}

{{!-- RUNNING --}}
## Running
{{#if (eq runtime "node")}}
To run your bot, there are a few scripts in your `package.json` file that you can use:

### Development

The `dev` script is used to run your bot in development mode, which will automatically restart your bot when you make changes to your code. To run your bot in development mode, you can use the following command:

```bash
{{packageManager}} run dev
```

### Production

To build your bot for production, you can run the `build` script. This will create a `dist` folder with your bot's code transpiled to JavaScript. To build your bot, you can use the following command:

```bash
{{packageManager}} run build
```

After building your bot, you can run the `start` script to start your bot in production mode. To start your bot in production mode, you can use the following command:

```bash
{{packageManager}} run start
```
{{else if (eq runtime "bun")}}
To run your bot, there is a `start` script in your `package.json` file. You can run it with the following command:

```bash
bun run start
```
{{else if (eq runtime "cloudflare")}}
To deploy your bot, there are a few scripts in your `package.json` file.

You can use the `build` script to build your bot for production, but don't actually deploy it, so you can test that everything works.

```bash
{{packageManager}} run build
```

The `deploy` script is used to deploy your bot to Cloudflare. You can run it with the following command:

```bash
{{packageManager}} run deploy
```

You can use the `dev` script to deploy your bot and then watch the logs in real time in your console.
```bash
{{packageManager}} run dev
```
{{else if (eq runtime "nextjs")}}
To run your bot, there are a few scripts in your `package.json` file that you can use:

You can use the `dev` script to run your bot in development mode, which will automatically restart your bot when you make changes to your code. To run your bot in development mode, you can use the following command:

```bash
{{packageManager}} run dev
```
{{/if}}

{{!-- LINKED ROLES --}}
{{#if plugins.linkedRoles}}
## Linked Roles

Since you added Linked Roles to your bot, make sure that you add the \`CLIENT_SECRET\` and \`BASE_URL\` env variables as well!

Once you have your LinkedRoles instance, you need to set it on Discord so that users will use it for linked roles. You can see where to add this by clicking here, and set the linked role to <BASE_URL>/connect, so for example, https://my-carbon-worker.YOURNAME.workers.dev/connect. You'll also need to add a redirect URL to your Discord application, so that users can be redirected to your website after they login. You can go to the OAuth tab on the dashboard and add a redirect URL there of <BASE_URL>/connect/callback, so for example, https://my-carbon-worker.YOURNAME.workers.dev/connect/callback.
{{/if}}

{{!-- WHATS NEXT --}}
## What's Next?

Now that you have your bot running, you can start adding commands to it. You can do this by creating a new file in the `src/commands` folder, and adding a new class that extends the `Command` class.

For more information on how to create commands, check out the [Carbon documentation](https://carbon.buape.com/carbon/classes/commands).
