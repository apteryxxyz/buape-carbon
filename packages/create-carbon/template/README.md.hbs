---
path: README.md
---

# {{name}}

## Getting Started in Development

### Setting Environment Variables

First things first, you'll need to grab your Discord application's secrets from the [Developer Portal](https://discord.com/developers/applications) and paste them in your {{#if (eq runtime "cloudflare")}}`.dev.vars`{{else if (eq runtime "next")}}`.env.local`{{else}}`.env`{{/if}} file.

### Start a Proxy

Discord requires a public URL to route interactions to your project. To achieve this, you'll need to set up a proxy. The simplest way to do this is by using [`npx localtunnel`](https://www.npmjs.com/package/localtunnel). Once you have the public URL, set it as `BASE_URL="<PUBLIC_URL>{{#if (eq runtime "next")}}/api/discord{{/if}}"` in your {{#if (eq runtime "cloudflare")}}`.dev.vars`{{else if (eq runtime "next")}}`.env.local`{{else}}`.env`{{/if}} file.

> [!TIP]
> You can use the `--subdomain` flag to specify a custom subdomain for your proxy.

### Configuring Portal URLs

Now that you have a public URL, navigate back to the [Discord Developer Portal](https://discord.com/developers/applications) and set the "Interactions Endpoint URL"  to `<PUBLIC_URL>{{#if (eq runtime "next")}}/api/discord{{/if}}/interactions`{{#if plugins.linkedRoles}} and the "Linked Roles Verification URL" to `<PUBLIC_URL>{{#if (eq runtime "next")}}/api/discord{{/if}}/linked-roles/verify-user`{{/if}}.

### Invite your App

You'll need to invite your app to your server to interact with it. To do so navigate to the Installation tab of your app in the [Discord Developer Portal](https://discord.com/developers/applications).

### Running the Bot

You're all set! You can now run your bot using `{{packageManager}} run dev`.

## Deploying to Production

{{#if (eq runtime "node")}}
### Prepare a Server

Since you're deploying a Node.js project, you'll need a server to host your bot. You'll also need to set up [Node.js](https://nodejs.org/) and [Git](https://git-scm.com/) on your server.

### Initialize a Git Repository

You'll need to transfer your project files to your server, this can be done using [Git](https://git-scm.com/) and [GitHub](https://github.com/). To do this, initialize a new Git repository, commit your files and push them to GitHub. On your server you can then clone your repository.

> [!IMPORTANT]
> Make sure not to commit your `.env` file or any secrets to your repository.

### Preparing Environment

Almost there! Now just like in development, you'll need to set up a proxy, configure your environment variables and set up your Discord app's URLs. Additionally you'll need to install your dependencies using `{{packageManager}} install`.

### Build and Start the Bot

Now that you've prepared your environment, you can finally build and start your bot using `{{packageManager}} run build` and `{{packageManager}} start` respectively. You may also want to set up a process manager like [PM2](https://npmjs.com/package/pm2) to keep your bot running in the background.

{{else if (eq runtime "bun")}}
### Prepare a Server

Since you're deploying a Bun project, you'll need a server to host your bot. You'll also need to set up [Bun](https://bun.sh/) and [Git](https://git-scm.com/) on your server.

### Initialize a Git Repository

You'll need to transfer your project files to your server, this can be done using [Git](https://git-scm.com/) and [GitHub](https://github.com/). To do this, initialize a new Git repository, commit your files and push them to GitHub. On your server you can then clone your repository.

> [!IMPORTANT]
> Make sure not to commit your `.env` file or any secrets to your repository.

### Preparing Environment

Almost there! Now just like in development, you'll need to set up a proxy, configure your environment variables and set up your Discord app's URLs. Additionally you'll need to install your dependencies using `{{packageManager}} install`.

### Start the Bot

Now that you've prepared your environment, you can finally start your bot using `bun start`. You may also want to set up a process manager like [PM2](https://bun.sh/guides/ecosystem/pm2) to keep your bot running in the background.

{{else if (eq runtime "cloudflare")}}
### Preparing Environment

Before deploying your bot, you'll need to set your environment variables. This can be done using the Wrangler CLI.

```bash
{{packageManager}} run wrangler secret put BASE_URL # e.g. https://{{name}}.<ACCOUNT_NAME>.workers.dev
{{packageManager}} run wrangler secret put DISCORD_PUBLIC_KEY
{{packageManager}} run wrangler secret put DISCORD_CLIENT_ID
{{packageManager}} run wrangler secret put DISCORD_CLIENT_SECRET
{{packageManager}} run wrangler secret put DISCORD_BOT_TOKEN
```

### Deploy to Cloudflare

Once you've set your environment variables, you can deploy your bot with the following command `{{packageManager}} run deploy`.


{{else if (eq runtime "next")}}
Your new app can be deployed anywhere you can run a Next.js app. For detailed instructions, refer to the [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying).
{{/if}}

## What's Next?

Now that you have your bot running, you can start adding commands to it. You can do this by creating a new file in the `src/commands` folder, and adding a new class that extends the `Command` class.

For more information on how to create commands, check out the [Carbon documentation](https://carbon.buape.com/carbon/classes/commands).
